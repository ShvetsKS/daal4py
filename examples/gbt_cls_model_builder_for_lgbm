from typing import List, Dict, Any


class Node:
    def __init__(self, tree: Dict[str, Any], parentId: int, position: int):
        self.tree = tree
        self.parentId = parentId
        self.position = position


def model_builder_lgbm(lgb_model: Dict[str, Any]) -> Any:
    if "name" not in lgb_model or lgb_model["name"] != "tree" or "version" not in lgb_model:
        # TODO: Probably need more appropriate checks
        raise ValueError("This function only works for LightGBM models")

    nFeatures = lgb_model["max_feature_idx"] + 1
    nIterations = len(lgb_model["tree_info"]) / lgb_model["num_tree_per_iteration"]
    nClasses = lgb_model["num_tree_per_iteration"]
    if nClasses == 1:
        nClasses = 2

    mb = daal4py.model_builder(nFeatures=nFeatures, nIterations=nIterations, nClasses=nClasses)

    for tree in lgb_model["tree_info"]:
        treeId = mb.create_tree(nNodes=tree["num_leaves"]*2-1, classLabel=0)
        struct = tree["tree_structure"]
        if "leaf_index" in struct:
            mb.add_leaf(treeId=treeId, response=struct["leaf_value"])
            continue
        parentId = mb.add_split(
            treeId=treeId, featureIndex=struct["split_feature"],
            featureValue=struct["threshold"])

        node_stack: List[Node] = [Node(struct["left_child"], parentId, 0),
                                  Node(struct["right_child"], parentId, 1)]
        while node_stack:
            struct = node_stack[-1].tree
            parentId = node_stack[-1].parentId
            position = node_stack[-1].position
            node_stack.pop()

            if "leaf_index" in struct:
                mb.add_leaf(
                    treeId=treeId, response=struct["leaf_value"],
                    parentId=parentId, position=position)
                continue
            parentId = mb.add_split(
                treeId=treeId, featureIndex=struct["split_feature"],
                featureValue=struct["threshold"],
                parentId=parentId, position=position)

            node_stack.append(Node(struct["left_child"], parentId, 0))
            node_stack.append(Node(struct["right_child"], parentId, 1))

    return mb.model()
